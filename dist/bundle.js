(()=>{"use strict";var t={56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var o={},i=[],a=0;a<t.length;a++){var c=t[a],u=n.base?c[0]+n.base:c[0],l=o[u]||0,p="".concat(u," ").concat(l);o[u]=l+1;var d=r(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var m=s(h,n);n.byIndex=a,e.splice(a,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function s(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var a=r(o[i]);e[a].references--}for(var c=n(t,s),u=0;u<o.length;u++){var l=r(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},89:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r}).join("")},e.i=function(t,r,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(i[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);n&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),e.push(l))}},e}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},659:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},818:(t,e,r)=>{r.d(e,{A:()=>a});var n=r(963),s=r.n(n),o=r(89),i=r.n(o)()(s());i.push([t.id,".vjs-vtt-thumbnail-holder {\n  position: absolute;\n  transition: opacity 0.2s;\n  bottom: calc(100% + 24px);\n  border-radius: 4px 4px 0 0;\n  pointer-events: none;\n}\n\n.vjs-vtt-thumbnail-timestamp {\n  position: absolute;\n  width: 100%;\n  height: 32px;\n  bottom: -32px;\n  background-color: #1a1a1a;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  border-radius: 0 0 4px 4px;\n}","",{version:3,sources:["webpack://./src/plugin.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,yBAAyB;EACzB,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,0BAA0B;AAC5B",sourcesContent:[".vjs-vtt-thumbnail-holder {\n  position: absolute;\n  transition: opacity 0.2s;\n  bottom: calc(100% + 24px);\n  border-radius: 4px 4px 0 0;\n  pointer-events: none;\n}\n\n.vjs-vtt-thumbnail-timestamp {\n  position: absolute;\n  width: 100%;\n  height: 32px;\n  bottom: -32px;\n  background-color: #1a1a1a;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  border-radius: 0 0 4px 4px;\n}"],sourceRoot:""}]);const a=i},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var s=void 0!==r.layer;s&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,s&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},963:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}}},e={};function r(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0;const n=require("video.js");var s=r.n(n),o=r(72),i=r.n(o),a=r(825),c=r.n(a),u=r(659),l=r.n(u),p=r(56),d=r.n(p),h=r(540),m=r.n(h),f=r(113),v=r.n(f),g=r(818),A={};A.styleTagTransform=v(),A.setAttributes=d(),A.insert=l().bind(null,"head"),A.domAPI=c(),A.insertStyleElement=m(),i()(g.A,A),g.A&&g.A.locals&&g.A.locals;const b=s().getPlugin("plugin");class y extends b{constructor(t,e){super(t,e),e.vttSrc?(this.vttSrc=e.vttSrc,this.getVttData(),this.createThumbnailPreview()):console.error("No source file exists!")}getVttData(){fetch(this.vttSrc).then(t=>t.text()).then(t=>{this.vttData=this.processVttPayload(t)}).catch(t=>{console.error("Error fetching VTT file:",t)})}processVttPayload(t){const e=[],r=t.split("\n");let n=0;for(;n<r.length;){const t=r[n].trim();if(t&&!t.startsWith("WEBVTT")){const s=t.match(/(\d{2}:\d{2}:\d{2}\.\d{3}) --> (\d{2}:\d{2}:\d{2}\.\d{3})/);if(s){const t=this.getSecondsFromTimestamp(s[1]),o=this.getSecondsFromTimestamp(s[2]);n++;const i=r[n].trim(),a=i.match(/#xywh=(\d+),(\d+),(\d+),(\d+)/);if(a){const[,r,n,s,c]=a,u={backgroundImage:`url(${i.split("#")[0]})`,backgroundPosition:`-${r}px -${n}px`,width:`${s}px`,height:`${c}px`};e.push({start:t,end:o,css:u})}}else console.error("malformated time code: ",t)}n++}return e}createThumbnailPreview(){if(this.thumbHolder=document.createElement("div"),this.thumbHolder.setAttribute("class","vjs-vtt-thumbnail-holder"),this.timestampLabel=document.createElement("div"),this.timestampLabel.setAttribute("class","vjs-vtt-thumbnail-timestamp"),this.thumbHolder.appendChild(this.timestampLabel),this.progressBar=this.player.$(".vjs-progress-control"),!this.progressBar)return;this.progressBar.appendChild(this.thumbHolder);const t=this.player.$(".vjs-mouse-display");t&&t.classList.add("vjs-hidden"),this.progressBar.addEventListener("mouseenter",this.onProgressBarMouseEnter),this.progressBar.addEventListener("mouseleave",this.onProgressBarMouseLeave)}onProgressBarMouseEnter=()=>{this.progressBar.addEventListener("mousemove",this.onProgressBarMouseMove),this.showThumbnailHolder()};onProgressBarMouseLeave=()=>{this.progressBar.removeEventListener("mousemove",this.onProgressBarMouseMove),this.hideThumbnailHolder()};onProgressBarMouseMove=t=>{const e=this.player.duration(),r=s().dom.getPointerPosition(this.progressBar,t).x,n=s().time.formatTime(r*e,e);this.timestampLabel.innerHTML=n.toString();const o=r*e,i=this.getStyleForTime(o);for(const t in i)i.hasOwnProperty(t)&&(this.thumbHolder.style[t]=i[t]);const a=this.thumbHolder.getBoundingClientRect().width/2,c=this.progressBar.offsetWidth,u=r*c;this.thumbHolder.style.transform=u<a?"translateX(0)":c-u<a?`translateX(${c-2*a}px)`:`translateX(${u-a}px)`};getStyleForTime(t){if(!this.vttData)return{};for(let e=0;e<this.vttData.length;e++){const r=this.vttData[e];if(t>=r.start&&t<=r.end)return r.css}return{}}getSecondsFromTimestamp(t){const e=t.split(":"),r=parseInt(e[0],10),n=parseInt(e[1],10),s=e[2].split(".");return 3600*r+60*n+parseInt(s[0],10)+parseInt(s[1],10)/1e3}showThumbnailHolder(){this.thumbHolder.style.display="block"}hideThumbnailHolder(){this.thumbHolder.style.display="none"}dispose(){this.progressBar.removeEventListener("mouseenter",this.onProgressBarMouseEnter),this.progressBar.removeEventListener("mouseleave",this.onProgressBarMouseLeave),super.dispose()}}s().registerPlugin("vttPreviewThumbnail",y),y.VERSION="1.0.2"})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,