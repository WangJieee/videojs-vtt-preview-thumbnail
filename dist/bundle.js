(()=>{"use strict";var t={56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var s={},a=[],i=0;i<t.length;i++){var c=t[i],l=n.base?c[0]+n.base:c[0],u=s[l]||0,p="".concat(l," ").concat(u);s[l]=u+1;var d=r(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var m=o(h,n);n.byIndex=i,e.splice(i,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var s=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var i=r(s[a]);e[i].references--}for(var c=n(t,o),l=0;l<s.length;l++){var u=r(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=c}}},89:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r}).join("")},e.i=function(t,r,n,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);n&&a[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},659:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},818:(t,e,r)=>{r.d(e,{A:()=>i});var n=r(963),o=r.n(n),s=r(89),a=r.n(s)()(o());a.push([t.id,".vjs-vtt-thumbnail-holder {\n  position: absolute;\n  transition: opacity 0.2s;\n  bottom: calc(100% + 24px);\n  border-radius: 4px 4px 0 0;\n  pointer-events: none;\n}\n\n.vjs-vtt-thumbnail-timestamp {\n  position: absolute;\n  width: 100%;\n  height: 32px;\n  bottom: -32px;\n  background-color: #1a1a1a;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  border-radius: 0 0 4px 4px;\n}","",{version:3,sources:["webpack://./src/plugin.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,yBAAyB;EACzB,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,0BAA0B;AAC5B",sourcesContent:[".vjs-vtt-thumbnail-holder {\n  position: absolute;\n  transition: opacity 0.2s;\n  bottom: calc(100% + 24px);\n  border-radius: 4px 4px 0 0;\n  pointer-events: none;\n}\n\n.vjs-vtt-thumbnail-timestamp {\n  position: absolute;\n  width: 100%;\n  height: 32px;\n  bottom: -32px;\n  background-color: #1a1a1a;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  border-radius: 0 0 4px 4px;\n}"],sourceRoot:""}]);const i=a},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},963:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(o," */");return[e].concat([s]).join("\n")}return[e].join("\n")}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={id:n,exports:{}};return t[n](s,s.exports,r),s.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0;const n=videojs;var o=r.n(n),s=r(72),a=r.n(s),i=r(825),c=r.n(i),l=r(659),u=r.n(l),p=r(56),d=r.n(p),h=r(540),m=r.n(h),f=r(113),v=r.n(f),g=r(818),A={};A.styleTagTransform=v(),A.setAttributes=d(),A.insert=u().bind(null,"head"),A.domAPI=c(),A.insertStyleElement=m(),a()(g.A,A),g.A&&g.A.locals&&g.A.locals;const b=o().getPlugin("plugin");class B extends b{constructor(t,e){super(t,e),e.vttSrc?(this.vttSrc=e.vttSrc,this.getVttData(),this.createThumbnailPreview()):console.error("No source file exists!")}getVttData(){fetch(this.vttSrc).then(t=>t.text()).then(t=>{this.vttData=this.processVttPayload(t)}).catch(t=>{console.error("Error fetching VTT file:",t)})}processVttPayload(t){const e=[],r=t.split("\n");let n=0;for(;n<r.length;){const t=r[n].trim();if(t&&!t.startsWith("WEBVTT")){const o=t.match(/(\d{2}:\d{2}:\d{2}\.\d{3}) --> (\d{2}:\d{2}:\d{2}\.\d{3})/);if(o){const t=this.getSecondsFromTimestamp(o[1]),s=this.getSecondsFromTimestamp(o[2]);n++;const a=r[n].trim(),i=a.match(/#xywh=(\d+),(\d+),(\d+),(\d+)/);if(i){const[,r,n,o,c]=i,l={backgroundImage:`url(${a.split("#")[0]})`,backgroundPosition:`-${r}px -${n}px`,width:`${o}px`,height:`${c}px`};e.push({start:t,end:s,css:l})}}else console.error("malformated time code: ",t)}n++}return e}createThumbnailPreview(){this.thumbHolder=document.createElement("div"),this.thumbHolder.setAttribute("class","vjs-vtt-thumbnail-holder"),this.timestampLabel=document.createElement("div"),this.timestampLabel.setAttribute("class","vjs-vtt-thumbnail-timestamp"),this.thumbHolder.appendChild(this.timestampLabel),this.progressBar=this.player.controlBar.progressControl.el(),this.progressBar.appendChild(this.thumbHolder),this.player.controlBar.progressControl.seekBar.mouseTimeDisplay.addClass("vjs-hidden"),this.progressBar.addEventListener("mouseenter",this.onProgressBarMouseEnter),this.progressBar.addEventListener("mouseleave",this.onProgressBarMouseLeave)}onProgressBarMouseEnter=()=>{this.progressBar.addEventListener("mousemove",this.onProgressBarMouseMove),this.showThumbnailHolder()};onProgressBarMouseLeave=()=>{this.progressBar.removeEventListener("mousemove",this.onProgressBarMouseMove),this.hideThumbnailHolder()};onProgressBarMouseMove=t=>{const e=this.player.duration(),r=o().dom.getPointerPosition(this.progressBar,t).x,n=o().time.formatTime(r*e,e);this.timestampLabel.innerHTML=n.toString();const s=r*e,a=this.getStyleForTime(s);for(const t in a)a.hasOwnProperty(t)&&(this.thumbHolder.style[t]=a[t]);const i=this.thumbHolder.getBoundingClientRect().width/2,c=this.progressBar.offsetWidth,l=r*c;this.thumbHolder.style.transform=l<i?"translateX(0)":c-l<i?`translateX(${c-2*i}px)`:`translateX(${l-i}px)`};getStyleForTime(t){if(!this.vttData)return{};for(let e=0;e<this.vttData.length;e++){const r=this.vttData[e];if(t>=r.start&&t<=r.end)return r.css}return{}}getSecondsFromTimestamp(t){const e=t.split(":"),r=parseInt(e[0],10),n=parseInt(e[1],10),o=e[2].split(".");return 3600*r+60*n+parseInt(o[0],10)+parseInt(o[1],10)/1e3}showThumbnailHolder(){this.thumbHolder.style.display="block"}hideThumbnailHolder(){this.thumbHolder.style.display="none"}dispose(){this.progressBar.removeEventListener("mouseenter",this.onProgressBarMouseEnter),this.progressBar.removeEventListener("mouseleave",this.onProgressBarMouseLeave),super.dispose()}}o().registerPlugin("vttPreviewThumbnail",B),B.VERSION="1.0.1"})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,